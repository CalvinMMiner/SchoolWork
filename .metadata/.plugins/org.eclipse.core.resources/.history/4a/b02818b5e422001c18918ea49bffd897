import java.util.Random;
import java.text.DecimalFormat;

//This class uses Node and its descendants to perform some basic algebra with variables
public class TestAlgebra 
{
	static Random r = new Random();//used to ensure the random number are different when called across different methods 

	//the main method uses the methods randOperator and randOperatorAndConstents to generate the Algebra expressions
	public static void main(String[] args) 
	{
		DecimalFormat numberFormat = new DecimalFormat("#0.0");
		Node n = (Node) randOperator();
		Node m = (Node) randOperator();
		double[] data1 = {1,2,3};
		double[] data2 = {4,5,6};
				
		System.out.println(n+" = "+ numberFormat.format(n.eval(data1)));
		System.out.println(m+" = "+ numberFormat.format(m.eval(data2)));
	}
	
	//Determines which operation forms the middle of the tree and calls randOperatorAndConstents to define the branches
	private static Node randOperator()
	{
		switch(r.nextInt(4))
		{
			case 0: Plus  p = new Plus  (randOperatorAndConstents(),randOperatorAndConstents()); return p;
			case 1: Minus m = new Minus (randOperatorAndConstents(),randOperatorAndConstents()); return m;
			case 2: Mult  M = new Mult  (randOperatorAndConstents(),randOperatorAndConstents()); return M;
			case 3:Divide d = new Divide(randOperatorAndConstents(),randOperatorAndConstents()); return d;
		}
				
		return null;
	}
		
	//Determines which operations happen on the branches and calls ConstentsOrVariables to determine what ends the branches
	private static Node randOperatorAndConstents()
	{
		switch(r.nextInt(4))
		{
			case 0: Plus  p = new Plus  (ConstentsOrVariables(), ConstentsOrVariables()); return p;
			case 1: Minus m = new Minus (ConstentsOrVariables(), ConstentsOrVariables()); return m;
			case 2: Mult  M = new Mult  (ConstentsOrVariables(), ConstentsOrVariables()); return M;
			case 3:Divide d = new Divide(ConstentsOrVariables(), ConstentsOrVariables()); return d;
		}
				
		return null;
	}
	
	//uses a random Boolean to return a constant or a variable at a roughly 50/50 rate
	private static Node ConstentsOrVariables()
	{
		if (r.nextBoolean()) { Const 	c = new Const(r.nextInt(20)+1); return c;}
		else 				 { Variable v = new Variable();             return v;}
	}
	
	/**Commented out because it is not used in this version
	 * Determines which operations end the branches and what numbers are used in the operation
	private static Node randOperatorAndConstants()
	{
		switch(r.nextInt(4))
		{
			case 0: Plus  p = new Plus  (new Const(r.nextInt(20)+1), new Const(r.nextInt(20)+1)); return p;
			case 1: Minus m = new Minus (new Const(r.nextInt(20)+1), new Const(r.nextInt(20)+1)); return m;
			case 2: Mult  M = new Mult  (new Const(r.nextInt(20)+1), new Const(r.nextInt(20)+1)); return M;				
			case 3:Divide d = new Divide(new Const(r.nextInt(20)+1), new Const(r.nextInt(20)+1)); return d;
		}				
	return null;
	} **/
}


import java.util.Random;
import java.text.DecimalFormat;

//This class uses Node and its descendants to perform some basic algebra with variables
public class TestAlgebra 
{
	static Random r = new Random();//used to ensure the random number are different when called across different methods 

	//the main method uses the methods randOperator and randOperatorAndConstents to generate the Algebra expressions
	public static void main(String[] args) 
	{
		DecimalFormat numberFormat = new DecimalFormat("#0.0");
		int depth = 5;
		Node n = (Node) randOperator(depth, 0);
		Node m = (Node) randOperator(depth, 0);
		double[] data1 = {1,2,3};
		double[] data2 = {4,5,6};
				
		System.out.println(n+" = "+ numberFormat.format(n.eval(data1)));
		System.out.println(m+" = "+ numberFormat.format(m.eval(data2)));
	}
	
	//creates a binary tree. uses operation based nodes for the branches and terminates with either a const or a variable. tree size is determined by depth
	private static Node randOperator(int depth, int currentDepth)
	{
		currentDepth++;
			switch(r.nextInt(4) )
			{
				case 0: Plus  p = new Plus  ( (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() ) ,
										      (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() ) ); return p;
				case 1: Minus m = new Minus ( (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() ),
											  (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() )	); return m;
				case 2: Mult  M = new Mult  ( (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() ),
											  (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() )	); return M;
				case 3:Divide d = new Divide( (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() ),
											  (currentDepth<=depth ? (randOperator(depth,currentDepth) ) : RandomConstentsOrVariables() )	); return d;
				default:return null;
			}
	}
			
	//uses a random Boolean to return a constant or a variable at a roughly 50/50 rate
	private static Node RandomConstentsOrVariables()
	{
		if (r.nextBoolean()){	Const 	c = new Const(r.nextInt(20)+1);	return c;	}
		else{	Variable v = new Variable();	return v;	}
	}
}

